/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import BUS.CourseBUS;
import BUS.CourseInstructorBUS;
import BUS.PersonBUS;
import BUS.StudentGradeBUS;

import DTO.CourseDTO;
import DTO.CourseInstructorDTO;
import DTO.PersonDTO;
import DTO.StudentGradeDTO;
import GUI.CourseInstructor.AddInstructorForm;
import GUI.CourseInstructor.DetailCourseInstructorFrm;
import GUI.StudentGrade.AddStudentGrade;
import GUI.StudentGrade.UpdateStudentGrade;
import com.formdev.flatlaf.themes.FlatMacLightLaf;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import com.formdev.flatlaf.FlatLightLaf;
import java.awt.Color;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ItemEvent;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.Map;
import javax.swing.DefaultCellEditor;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.WindowConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;
import java.util.HashMap;
import javax.swing.DefaultComboBoxModel;

/**
 *
 * @author Vi Hao
 */
public class MainForm extends javax.swing.JFrame {
    private Map<String, Integer> courseMap;
    private CourseInstructorBUS cour_instrucBUS;
    private CourseBUS courseBUS;
    private PersonBUS personBUS;
    private StudentGradeBUS studentGBUS;
    private int studentID; // Khai báo biến studentID trong lớp hiện tại
    private boolean search = false;
    private boolean filter;
    private boolean isModify = false;
    // Hàm setter cho studentID
    String find = "";
    private Map<Integer, Float> editedGrades;
    StudentGradeBUS stdb;

    public void setStudentID(int studentID) {
        this.studentID = studentID;
    }
    

   

    /**
     * Creates new form MainForm
     */
    public MainForm() {
        FlatMacLightLaf.setup();
        initComponents();
        runMain();
        cour_instrucBUS = new CourseInstructorBUS();
        courseBUS = new CourseBUS();
        personBUS = new PersonBUS();
        studentGBUS = new StudentGradeBUS();
        Item test = new Item();
        

        loadDataIntoTableModel();
        loadDataCourse();
        loadDataIntoGradeTable();
        test.showCbbCourseTitle();
    }

    public void addPlaceHolderStyle(JTextField jtf) {
        Font f = jtf.getFont();
        f = f.deriveFont(Font.ITALIC);
        jtf.setFont(f);
        jtf.setForeground(Color.gray);
    }

    public void removePlaceHolderStyle(JTextField jtf) {
        Font f = jtf.getFont();
        f = f.deriveFont(Font.PLAIN | Font.BOLD);
        jtf.setFont(f);
        jtf.setForeground(Color.black);
    }

    public void loadDataIntoTableModel() {
        this.cour_instrucBUS.ListCourseInstructor();
        DefaultTableModel model = (DefaultTableModel) mainTbl.getModel();
        model.setRowCount(0);
        // You can replace this with actual data loading logic from a database or
        // another source
        cour_instrucBUS.ListCourseInstructor();
        ArrayList<CourseInstructorDTO> listCourse = cour_instrucBUS.getList();
        for (CourseInstructorDTO tmp : listCourse) {
            model.addRow(new Object[] { tmp.getCourseID(), courseBUS.GetCourseById(tmp.getCourseID()).getTitle(),
                    tmp.getPersonID(), personBUS.GetPersonById(tmp.getPersonID()).getFirstName() + " "
                            + personBUS.GetPersonById(tmp.getPersonID()).getLastName() });
        }
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);
        mainTbl.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
        mainTbl.getColumnModel().getColumn(2).setCellRenderer(centerRenderer);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        mainTbl = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jtf_search = new javax.swing.JTextField();
        addBtn = new javax.swing.JButton();
        delBtn = new javax.swing.JButton();
        reloadBtn = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jtf_searchGrade = new javax.swing.JTextField();
        btnModify = new javax.swing.JButton();
        reloadBtn1 = new javax.swing.JButton();
        cbbCourse = new javax.swing.JComboBox<>();
        btnSave = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        btnDel1 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        gradeTB = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jtf_searchCourse = new javax.swing.JTextField();
        btn_addCourse = new javax.swing.JButton();
        reload_course = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tb_course = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTabbedPane1.setBackground(new java.awt.Color(255, 255, 255));
        jTabbedPane1.setTabPlacement(javax.swing.JTabbedPane.LEFT);

        mainTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Course ID", "Course name", "Instructor ID", "Instructor name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        mainTbl.setColumnSelectionAllowed(true);
        mainTbl.setCellSelectionEnabled(false);
        mainTbl.setRowSelectionAllowed(true);
        mainTbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mainTblClicked(evt);
            }
        });
        jScrollPane1.setViewportView(mainTbl);
        mainTbl.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (mainTbl.getColumnModel().getColumnCount() > 0) {
            mainTbl.getColumnModel().getColumn(0).setPreferredWidth(1);
            mainTbl.getColumnModel().getColumn(2).setPreferredWidth(1);
        }

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Action"));

        jtf_search.setText("Search by ID/name");
        jtf_search.setPreferredSize(new java.awt.Dimension(300, 22));
        jtf_search.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jtf_searchFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtf_searchFocusLost(evt);
            }
        });
        jtf_search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtf_searchActionPerformed(evt);
            }
        });

        addBtn.setBackground(new java.awt.Color(0, 204, 255));
        addBtn.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        addBtn.setForeground(new java.awt.Color(255, 255, 255));
        addBtn.setText("Modify");
        addBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        addBtn.setName(""); // NOI18N
        addBtn.setPreferredSize(new java.awt.Dimension(80, 40));
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        delBtn.setBackground(new java.awt.Color(255, 0, 0));
        delBtn.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        delBtn.setForeground(new java.awt.Color(255, 255, 255));
        delBtn.setText("Delete");
        delBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        delBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        delBtn.setPreferredSize(new java.awt.Dimension(80, 40));
        delBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                delBtnMouseClicked(evt);
            }
        });

        reloadBtn.setBackground(new java.awt.Color(153, 153, 153));
        reloadBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/icons8-reload-30.png"))); // NOI18N
        reloadBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        reloadBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        reloadBtn.setPreferredSize(new java.awt.Dimension(40, 40));
        reloadBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                reloadBtnMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jtf_search, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 179, Short.MAX_VALUE)
                .addComponent(addBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(delBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(reloadBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(addBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(delBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(reloadBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jtf_search, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 711, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 774, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Course Instructor", new javax.swing.ImageIcon(getClass().getResource("/Icon/icons8-assignment-48.png")), jPanel3, "Quản lý phân công"); // NOI18N

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Action"));

        jtf_searchGrade.setText("Search by ID/name");
        jtf_searchGrade.setPreferredSize(new java.awt.Dimension(300, 22));
        jtf_searchGrade.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jtf_searchGradeCaretUpdate(evt);
            }
        });
        jtf_searchGrade.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jtf_searchGradeFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtf_searchGradeFocusLost(evt);
            }
        });
        jtf_searchGrade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtf_searchGradeActionPerformed(evt);
            }
        });

        btnModify.setBackground(new java.awt.Color(0, 204, 255));
        btnModify.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        btnModify.setForeground(new java.awt.Color(255, 255, 255));
        btnModify.setText("Modify");
        btnModify.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnModify.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnModify.setName(""); // NOI18N
        btnModify.setPreferredSize(new java.awt.Dimension(80, 40));
        btnModify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModifyActionPerformed(evt);
            }
        });

        reloadBtn1.setBackground(new java.awt.Color(153, 153, 153));
        reloadBtn1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/icons8-reload-30.png"))); // NOI18N
        reloadBtn1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        reloadBtn1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        reloadBtn1.setPreferredSize(new java.awt.Dimension(40, 40));
        reloadBtn1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                reloadBtn1MouseClicked(evt);
            }
        });

        cbbCourse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbbCourseActionPerformed(evt);
            }
        });

        btnSave.setBackground(new java.awt.Color(0, 0, 102));
        btnSave.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        btnSave.setForeground(new java.awt.Color(255, 255, 255));
        btnSave.setText("Save");
        btnSave.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSave.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnSave.setName(""); // NOI18N
        btnSave.setPreferredSize(new java.awt.Dimension(80, 40));
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnAdd.setBackground(new java.awt.Color(0, 51, 51));
        btnAdd.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        btnAdd.setForeground(new java.awt.Color(255, 255, 255));
        btnAdd.setText("Add");
        btnAdd.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAdd.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAdd.setName(""); // NOI18N
        btnAdd.setPreferredSize(new java.awt.Dimension(80, 40));
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnDel1.setBackground(new java.awt.Color(255, 0, 0));
        btnDel1.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        btnDel1.setForeground(new java.awt.Color(255, 255, 255));
        btnDel1.setText("Delete");
        btnDel1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnDel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnDel1.setName(""); // NOI18N
        btnDel1.setPreferredSize(new java.awt.Dimension(80, 40));
        btnDel1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDel1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jtf_searchGrade, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbbCourse, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 82, Short.MAX_VALUE)
                .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDel1, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnModify, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(reloadBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(reloadBtn1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jtf_searchGrade, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnModify, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cbbCourse, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnDel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(9, Short.MAX_VALUE))
        );

        btnModify.getAccessibleContext().setAccessibleName("Add");

        gradeTB.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "EnrollmentID", "Course ID", "Course Name", "Student ID", "Student Name", "Grade"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        gradeTB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                gradeTBClicked(evt);
            }
        });
        jScrollPane3.setViewportView(gradeTB);
        gradeTB.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (gradeTB.getColumnModel().getColumnCount() > 0) {
            gradeTB.getColumnModel().getColumn(0).setPreferredWidth(1);
            gradeTB.getColumnModel().getColumn(2).setPreferredWidth(1);
        }

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane3))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 770, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jTabbedPane1.addTab("Student Grade", new javax.swing.ImageIcon(getClass().getResource("/Icon/icons8-grade-48.png")), jPanel2, "Quản lý kết quả"); // NOI18N

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(242, 242, 242), 5));
        jPanel6.setLayout(new java.awt.BorderLayout(10, 10));

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Action", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 14))); // NOI18N
        jPanel5.setPreferredSize(new java.awt.Dimension(408, 80));

        jtf_searchCourse.setText("Search by ID/name");
        jtf_searchCourse.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jtf_searchCourseFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtf_searchCourseFocusLost(evt);
            }
        });
        jtf_searchCourse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtf_searchCourseActionPerformed(evt);
            }
        });

        btn_addCourse.setBackground(new java.awt.Color(51, 204, 255));
        btn_addCourse.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btn_addCourse.setForeground(new java.awt.Color(255, 255, 255));
        btn_addCourse.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_addCourse.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btn_addCourse.setLabel("Add");
        btn_addCourse.setName(""); // NOI18N
        btn_addCourse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_addCourseActionPerformed(evt);
            }
        });

        reload_course.setBackground(new java.awt.Color(153, 153, 153));
        reload_course.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/icons8-reload-30.png"))); // NOI18N
        reload_course.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        reload_course.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        reload_course.setPreferredSize(new java.awt.Dimension(40, 40));
        reload_course.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                reload_courseMouseClicked(evt);
            }
        });
        reload_course.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reload_courseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jtf_searchCourse, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 260, Short.MAX_VALUE)
                .addComponent(btn_addCourse, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addComponent(reload_course, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jtf_searchCourse, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 13, Short.MAX_VALUE))
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(reload_course, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_addCourse, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel6.add(jPanel5, java.awt.BorderLayout.NORTH);

        tb_course.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Course ID", "Title", "Credits", "Department ID "
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tb_course.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tb_courseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tb_course);

        jPanel6.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel6, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Courses", new javax.swing.ImageIcon(getClass().getResource("/Icon/icons8-course-48.png")), jPanel1, "Quản lý khóa học"); // NOI18N

        getContentPane().add(jTabbedPane1, java.awt.BorderLayout.CENTER);
        jTabbedPane1.getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
    
        DefaultTableModel model = (DefaultTableModel) gradeTB.getModel();
        MyDefaultTableModel model2 = (MyDefaultTableModel) gradeTB.getModel();
 
        int rowCount = model.getRowCount();
        
        boolean success = true;

        for (int i = 0; i < rowCount; i++) {
            int enrollmentID = Integer.parseInt(model.getValueAt(i, 0).toString());
            int courseID = Integer.parseInt(model.getValueAt(i, 1).toString());
            int studentID = Integer.parseInt(model.getValueAt(i, 3).toString());
            String grade_string = model.getValueAt(i, 5).toString();
            if (grade_string.isEmpty() || !grade_string.matches("-?\\d+(\\.\\d+)?")) {
                JOptionPane.showMessageDialog(null, grade_string + " : Không phải là số");
                return;
            }
            float grade = Float.parseFloat(grade_string);

            if (grade > 10 || grade < 0) {
                JOptionPane.showMessageDialog(null, grade + " Điểm phải nằm trong khoảng từ 0 đến 10. Mời nhập lại.");
                return;
            }
            StudentGradeDTO upStu = new StudentGradeDTO();
            upStu.setCourseID(courseID);
            upStu.setEnrollmentID(enrollmentID);
            upStu.setStudentID(studentID);
            upStu.setGrade(grade);
            if (!studentGBUS.UpdateStudentGrade(upStu)) {
                success = false;
            }
        }

        if (success) {
            JOptionPane.showMessageDialog(this, "Cập nhật thành công", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            isModify = false;
            if(filter == false){
                loadDataIntoGradeTable();
            } else {
                loadFilteredDataIntoGradeTable();
            }
            for (int i = 0; i < model.getRowCount(); i++) {
                model2.setCellEditable(i, 5, false); 
            }
            gradeTB.setModel(model);
        } else {
            JOptionPane.showMessageDialog(this, "Có lỗi xảy ra trong quá trình cập nhật", "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
        
 
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        AddStudentGrade add = new AddStudentGrade();
        add.setVisible(true);
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnDel1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDel1ActionPerformed
        showComfirmRemove();
    }//GEN-LAST:event_btnDel1ActionPerformed

    private ArrayList<StudentGradeDTO> filteredStudentGrades; 
    private int isSelect; 
    
    private void cbbCourseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbbCourseActionPerformed
        DefaultTableModel model = (DefaultTableModel) gradeTB.getModel();
    
  
        String selectedTitle = (String) cbbCourse.getSelectedItem();
        int selectedId =  courseMap.get(selectedTitle);
        ArrayList<StudentGradeDTO> listStudentGrade = studentGBUS.getStudentGradesByCourseID(selectedId);
        isSelect =  selectedId;
        model.setRowCount(0);
        if(selectedId == -1){
            filter = false;
            loadDataIntoGradeTable();
        } else {
            filter = true;
            filteredStudentGrades = listStudentGrade;
            for(int i = 0; i <  filteredStudentGrades.size();i++){
            Object[] row = new Object[6];
            row[0] = filteredStudentGrades.get(i).getEnrollmentID();
            row[1] = filteredStudentGrades.get(i).getCourseID();
            int courseID = filteredStudentGrades.get(i).getCourseID();
            row[2] = courseBUS.GetCourseById(courseID).getTitle();
            row[3] = filteredStudentGrades.get(i).getStudentID();
            int personID = filteredStudentGrades.get(i).getStudentID();
            String personName = personBUS.GetPersonById(personID).getFirstName() + " " + personBUS.GetPersonById(personID).getLastName();
            row[4] = personName;
            row[5] = filteredStudentGrades.get(i).getGrade();
            model.addRow(row);
        }
         
        }
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);
        gradeTB.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
        gradeTB.getColumnModel().getColumn(1).setCellRenderer(centerRenderer);
        gradeTB.getColumnModel().getColumn(3).setCellRenderer(centerRenderer);
        gradeTB.getColumnModel().getColumn(5).setCellRenderer(centerRenderer);
        
    }//GEN-LAST:event_cbbCourseActionPerformed

    private void loadFilteredDataIntoGradeTable() {
        this.studentGBUS.getStudentGradesByCourseID(isSelect);
        DefaultTableModel model = (DefaultTableModel) gradeTB.getModel();
        ArrayList<StudentGradeDTO> listStudentGrade = studentGBUS.getStudentGradesByCourseID(isSelect);
        model.setRowCount(0);
        for (int i = 0; i < listStudentGrade.size(); i++) {
            Object[] row = new Object[6];
            row[0] = listStudentGrade.get(i).getEnrollmentID();
            row[1] = listStudentGrade.get(i).getCourseID();
            int courseID = listStudentGrade.get(i).getCourseID();
            row[2] = courseBUS.GetCourseById(courseID).getTitle();
            row[3] = listStudentGrade.get(i).getStudentID();
            int personID = listStudentGrade.get(i).getStudentID();
            String personName = personBUS.GetPersonById(personID).getFirstName() + " " + personBUS.GetPersonById(personID).getLastName();
            row[4] = personName;
            row[5] = listStudentGrade.get(i).getGrade();
            model.addRow(row);
        }
        
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);
        gradeTB.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
        gradeTB.getColumnModel().getColumn(1).setCellRenderer(centerRenderer);
        gradeTB.getColumnModel().getColumn(3).setCellRenderer(centerRenderer);
        gradeTB.getColumnModel().getColumn(5).setCellRenderer(centerRenderer);
        gradeTB.setModel(model);
    }
    
    private void tb_courseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_tb_courseClicked
        if (evt.getButton() == MouseEvent.BUTTON1 && evt.getClickCount() == 2) {
            String id = tb_course.getValueAt(tb_course.getSelectedRow(), 0).toString();
            new FormCourse(id, "show", tb_course);
        }
    }// GEN-LAST:event_tb_courseClicked

    private void jtf_searchCourseFocusGained(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_jtf_searchCourseFocusGained
        if (jtf_searchCourse.getText().equals("Search by ID/name")) {
            jtf_searchCourse.setText(null);
            jtf_searchCourse.requestFocus();
            System.out.println("");
        }
    }// GEN-LAST:event_jtf_searchCourseFocusGained

    private void jtf_searchCourseFocusLost(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_jtf_searchCourseFocusLost
        if (jtf_searchCourse.getText().length() == 0) {
            addPlaceHolderStyle(jtf_searchCourse);
            jtf_searchCourse.setText("Search by ID/name");
        }
    }// GEN-LAST:event_jtf_searchCourseFocusLost

    private void jtf_searchCourseActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jtf_searchCourseActionPerformed
        // TODO add your handling code here:
        String input = jtf_searchCourse.getText().toLowerCase().trim();
        DefaultTableModel model = (DefaultTableModel) tb_course.getModel();
        model.setRowCount(0);
        // You can replace this with actual data loading logic from a database or
        // another source
        ArrayList<CourseDTO> listCourse = courseBUS.getList();
        for (CourseDTO tmp : listCourse) {
            String course_title = tmp.getTitle();
            String credit = tmp.getCredits();
            String course_id = Integer.toString(tmp.getCourseID());
            String department_id = Integer.toString(tmp.getDepartmentID());

            if (course_title.toLowerCase().contains(input)
                    || credit.toLowerCase().contains(input)
                    || course_id.contains(input)
                    || department_id.contains(input)) {
                model.addRow(
                        new Object[] { tmp.getCourseID(), tmp.getTitle(), tmp.getCredits(), tmp.getDepartmentID() });
            }
        }
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);
        tb_course.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
        tb_course.getColumnModel().getColumn(2).setCellRenderer(centerRenderer);
        tb_course.getColumnModel().getColumn(3).setCellRenderer(centerRenderer);
    }// GEN-LAST:event_jtf_searchCourseActionPerformed

    private void btn_addCourseActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btn_addCourseActionPerformed
        new FormCourse(" ", "add", tb_course);
    }// GEN-LAST:event_btn_addCourseActionPerformed

    private void reload_courseMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_reload_courseMouseClicked
        jtf_searchCourse.setText("Search by ID/name");
        addPlaceHolderStyle(jtf_searchCourse);
        loadDataCourse();
    }// GEN-LAST:event_reload_courseMouseClicked

    private void reload_courseActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_reload_courseActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_reload_courseActionPerformed

    private void jtf_searchGradeFocusGained(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_jtf_searchGradeFocusGained
        if (jtf_searchGrade.getText().equals("Search by ID/name")) {
            jtf_searchGrade.setText(null);
            jtf_searchGrade.requestFocus();
            System.out.println("");
        }
    }// GEN-LAST:event_jtf_searchGradeFocusGained

    private void jtf_searchGradeFocusLost(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_jtf_searchGradeFocusLost
        if (jtf_searchGrade.getText().length() == 0) {
            addPlaceHolderStyle(jtf_searchGrade);
            jtf_searchGrade.setText("Search by ID/name");
        }
    }// GEN-LAST:event_jtf_searchGradeFocusLost

    private void jtf_searchGradeActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jtf_searchGradeActionPerformed
        String input = jtf_searchGrade.getText();
        if(input.isEmpty()){
            loadDataIntoGradeTable();
            return;
        }
        try {
            int studentID = Integer.parseInt(input);
            fillTable2(studentID);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(null, "Vui lòng nhập Student ID", "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }// GEN-LAST:event_jtf_searchGradeActionPerformed

    private void btnModifyActionPerformed(java.awt.event.ActionEvent evt) {
        MyDefaultTableModel model = new MyDefaultTableModel(gradeTB.getRowCount(), gradeTB.getColumnCount()); 
        isModify = true;  
        if (model.getColumnCount() < 6) {
            model.setColumnCount(6);
        }
       
        for (int i = 0; i < model.getRowCount(); i++) {
            model.setCellEditable(i, 5, true); 
        }
        
        String[] columnNames = {"EnrollmentID", "Course ID", "Course Name", "Student ID", "Student Name", "Grade"};
        model.setColumnIdentifiers(columnNames);
        
        gradeTB.setModel(model);
        
        if(filter == false){
            loadDataIntoGradeTable();
        } else {
            loadFilteredDataIntoGradeTable();
        }
    }
    
    public class MyDefaultTableModel extends DefaultTableModel {
        private boolean[][] editable_cells; // 2d array to represent rows and columns

        private MyDefaultTableModel(int rows, int cols) { // constructor
            super(rows, cols);
            this.editable_cells = new boolean[rows][cols];
        }
        @Override
        public boolean isCellEditable(int row, int column) { // custom isCellEditable function
            return this.editable_cells[row][column];
        }
        public void setCellEditable(int row, int col, boolean value) {
            this.editable_cells[row][col] = value; // set cell true/false
            this.fireTableCellUpdated(row, col);
        }
    }
    
    private void delBtn1MouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_delBtn1MouseClicked
        // TODO add your handling code here:
    }// GEN-LAST:event_delBtn1MouseClicked

    private void reloadBtn1MouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_reloadBtn1MouseClicked
        loadDataIntoGradeTable();
    }// GEN-LAST:event_reloadBtn1MouseClicked

    private void gradeTBClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_gradeTBClicked
        DefaultTableModel model = (DefaultTableModel) gradeTB.getModel();
        int selectedRow = gradeTB.getSelectedRow();
        if (evt.getClickCount() == 2) {
            int courseID = Integer.parseInt(model.getValueAt(selectedRow, 1).toString());
            String courseName = model.getValueAt(selectedRow, 2).toString();
            String studentName = model.getValueAt(selectedRow, 4).toString();
            float grade = Float.parseFloat(model.getValueAt(selectedRow, 5).toString());
            int studentId = Integer.parseInt(model.getValueAt(selectedRow, 3).toString());
            int enrollmentID = Integer.parseInt(model.getValueAt(selectedRow, 0).toString());
            try {
            InfoStudentGrade info = new InfoStudentGrade(enrollmentID, courseID, courseName,  studentId, studentName, grade );
            info.setLocationRelativeTo(this); 
            info.setVisible(true);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        }
    }

    private void delBtn1ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_delBtn1ActionPerformed
        /*showComfirmRemove();*/
    }// GEN-LAST:event_delBtn1ActionPerformed

    private void jtf_searchGradeCaretUpdate(javax.swing.event.CaretEvent evt) {// GEN-FIRST:event_jtf_searchGradeCaretUpdate
        // TODO add your handling code here:
    }// GEN-LAST:event_jtf_searchGradeCaretUpdate

    public void loadDataIntoGradeTable() {
        this.studentGBUS.ListStudentGrade();
        DefaultTableModel model = (DefaultTableModel) gradeTB.getModel();
        model.setRowCount(0);
        ArrayList<StudentGradeDTO> listStudentGrade = studentGBUS.getList();
        
        for (int i = 0; i < listStudentGrade.size(); i++) {
            Object[] row = new Object[6];
            row[0] = listStudentGrade.get(i).getEnrollmentID();
            row[1] = listStudentGrade.get(i).getCourseID();
            int courseID = listStudentGrade.get(i).getCourseID();
            row[2] = courseBUS.GetCourseById(courseID).getTitle();
            row[3] = listStudentGrade.get(i).getStudentID();
            int personID = listStudentGrade.get(i).getStudentID();
            String personName = personBUS.GetPersonById(personID).getFirstName() + " " + personBUS.GetPersonById(personID).getLastName();
            row[4] = personName;
            row[5] = listStudentGrade.get(i).getGrade();
            model.addRow(row);
        }

        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);
        gradeTB.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
        gradeTB.getColumnModel().getColumn(1).setCellRenderer(centerRenderer);
        gradeTB.getColumnModel().getColumn(3).setCellRenderer(centerRenderer);
        gradeTB.getColumnModel().getColumn(5).setCellRenderer(centerRenderer);
    }

    private void reloadBtnMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_jButton1MouseClicked
        // TODO add your handling code here:
        jtf_search.setText("Search by ID/name");
        addPlaceHolderStyle(jtf_search);
        loadDataIntoTableModel();
    }// GEN-LAST:event_jButton1MouseClicked

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_addBtnActionPerformed
        // TODO add your handling code here:
        AddInstructorForm frm = new AddInstructorForm(this);
        frm.addWindowListener(new WindowAdapter() {
            public void windowClosed(WindowEvent e) {

            };
        }

        );

    }// GEN-LAST:event_addBtnActionPerformed

    private void mainTblClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_mainTblClicked\
        DefaultTableModel model = (DefaultTableModel) mainTbl.getModel();
        int selectedRow = mainTbl.getSelectedRow();

        // Check if a valid cell is clicked
        if (selectedRow != -1 && evt.getClickCount() == 2) {

            Object courseID = model.getValueAt(selectedRow, 0);
            Object courseName = model.getValueAt(selectedRow, 1);
            Object personID = model.getValueAt(selectedRow, 2);
            Object personName = model.getValueAt(selectedRow, 3);

            DetailCourseInstructorFrm detailFrm = new DetailCourseInstructorFrm(personBUS.GetPersonById((int) personID),
                    courseBUS.GetCourseById((int) courseID));
            detailFrm.setVisible(true);
            detailFrm.setLocationRelativeTo(null);
        }
    }// GEN-LAST:event_mainTblClicked

    public void loadDataCourse() {
        DefaultTableModel model = (DefaultTableModel) tb_course.getModel();
        model.setRowCount(0);
        ArrayList<CourseDTO> listCourse = courseBUS.getList();
        for (CourseDTO tmp : listCourse) {
            model.addRow(new Object[] { tmp.getCourseID(), tmp.getTitle(), tmp.getCredits(), tmp.getDepartmentID() });
        }
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);
        tb_course.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
        tb_course.getColumnModel().getColumn(2).setCellRenderer(centerRenderer);
        tb_course.getColumnModel().getColumn(3).setCellRenderer(centerRenderer);
    }

    public static void loadDataCourse2(JTable tb_course) {
        DefaultTableModel model = (DefaultTableModel) tb_course.getModel();
        model.setRowCount(0);
        CourseBUS courseBUS = new CourseBUS();
        ArrayList<CourseDTO> listCourse = courseBUS.getList();
        for (CourseDTO tmp : listCourse) {
            model.addRow(new Object[] { tmp.getCourseID(), tmp.getTitle(), tmp.getCredits(), tmp.getDepartmentID() });
        }
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);
        tb_course.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
        tb_course.getColumnModel().getColumn(2).setCellRenderer(centerRenderer);
        tb_course.getColumnModel().getColumn(3).setCellRenderer(centerRenderer);
    }

    private void jtf_searchActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jtf_searchActionPerformed
        // TODO add your handling code here:
        String input = jtf_search.getText().toLowerCase().trim();
        DefaultTableModel model = (DefaultTableModel) mainTbl.getModel();
        model.setRowCount(0);
        // You can replace this with actual data loading logic from a database or
        // another source
        ArrayList<CourseInstructorDTO> listCourse = cour_instrucBUS.getList();
        for (CourseInstructorDTO tmp : listCourse) {
            String course_title = courseBUS.GetCourseById(tmp.getCourseID()).getTitle();
            String person_name = personBUS.GetPersonById(tmp.getPersonID()).getFirstName() + " "
                    + personBUS.GetPersonById(tmp.getPersonID()).getLastName();
            String course_id = Integer.toString(tmp.getCourseID());
            String person_id = Integer.toString(tmp.getPersonID());

            if (course_title.toLowerCase().contains(input)
                    || person_name.toLowerCase().contains(input)
                    || course_id.contains(input)
                    || person_id.contains(input)) {
                model.addRow(new Object[] { tmp.getCourseID(), course_title, tmp.getPersonID(), person_name });
            }
        }
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);
        mainTbl.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
        mainTbl.getColumnModel().getColumn(2).setCellRenderer(centerRenderer);
        System.out.println(input);
    }// GEN-LAST:event_jtf_searchActionPerformed

    private void jtf_searchFocusGained(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_jtf_searchFocusGained
        // TODO add your handling code here:
        if (jtf_search.getText().equals("Search by ID/name")) {
            jtf_search.setText(null);
            jtf_search.requestFocus();
            removePlaceHolderStyle(jtf_search);
        }
    }// GEN-LAST:event_jtf_searchFocusGained

    private void jtf_searchFocusLost(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_jtf_searchFocusLost
        // TODO add your handling code here:
        if (jtf_search.getText().length() == 0) {
            addPlaceHolderStyle(jtf_search);
            jtf_search.setText("Search by ID/name");
        }
    }// GEN-LAST:event_jtf_searchFocusLost

    private void delBtnMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_delBtnMouseClicked
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) mainTbl.getModel();
        int selectedRow = mainTbl.getSelectedRow();

        // Check if a valid cell is clicked
        if (selectedRow != -1) {
            mainTbl.setRowSelectionInterval(selectedRow, selectedRow);
            Object courseID = model.getValueAt(selectedRow, 0);
            Object courseName = model.getValueAt(selectedRow, 1);
            Object personID = model.getValueAt(selectedRow, 2);
            Object personName = model.getValueAt(selectedRow, 3);

            int res = JOptionPane.showConfirmDialog(null, "Are you sure want to continue", "Delete confirmation",
                    JOptionPane.YES_NO_CANCEL_OPTION);
            if (res != 0) {
                return;
            }

            CourseInstructorDTO ciDTO = new CourseInstructorDTO((int) courseID, (int) personID);
            cour_instrucBUS.DeleteCourseInstructor(ciDTO);
            loadDataIntoTableModel();
        } else {
            JOptionPane.showMessageDialog(null, "Please select a row in table to delete");
        }
    }// GEN-LAST:event_delBtnMouseClicked

    public void fillTable(int enrollmentID) {
        this.studentGBUS.ListStudentGrade();
        DefaultTableModel tblmodel = (DefaultTableModel) gradeTB.getModel();
        tblmodel.setRowCount(0);
        StudentGradeDTO studentGrade = studentGBUS.GetStudentGradeById(enrollmentID);
        if (studentGrade != null) {
            Object[] data = new Object[6];
            data[0] = studentGrade.getEnrollmentID();
            data[1] = studentGrade.getCourseID();
            int courseID = studentGrade.getCourseID();
            data[2] = courseBUS.GetCourseById(courseID).getTitle();
            data[3] = studentGrade.getStudentID();
            int personID = studentGrade.getStudentID();
            String personName = personBUS.GetPersonById(personID).getFirstName() + " " + personBUS.GetPersonById(personID).getLastName();
            data[4] = personName;
            data[5] = studentGrade.getGrade();
            tblmodel.addRow(data);
        }
    }

    public void fillTable2(int studentID) {
        this.studentGBUS.ListStudentGrade();
        DefaultTableModel tblmodel = (DefaultTableModel) gradeTB.getModel();
        tblmodel.setRowCount(0);
        ArrayList<StudentGradeDTO> studentGrades = studentGBUS.getStudentGradesByStudentID(studentID);
        if (studentGrades.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Không tìm thấy sinh viên có ID " + studentID, "Thông báo",
                    JOptionPane.INFORMATION_MESSAGE);
        } else {
            for (StudentGradeDTO studentGrade : studentGrades) {
                Object[] data = new Object[6];
                data[0] = studentGrade.getEnrollmentID();
                data[1] = studentGrade.getCourseID();
                int courseID = studentGrade.getCourseID();
                data[2] = courseBUS.GetCourseById(courseID).getTitle();
                data[3] = studentGrade.getStudentID();
                int personID = studentGrade.getStudentID();
                String personName = personBUS.GetPersonById(personID).getFirstName() + " " + personBUS.GetPersonById(personID).getLastName();
                data[4] = personName;
                data[5] = studentGrade.getGrade();
                tblmodel.addRow(data);
            }
        }
    }

    private void showComfirmRemove() {
        int selectedRow = gradeTB.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) gradeTB.getModel();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một hàng để xoá", "Thông báo",
                    JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (JOptionPane.showConfirmDialog(this, "Bạn chắc chứ?", "Question",
                JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            int enrollmentID = (int) model.getValueAt(selectedRow, 0);
            StudentGradeBUS bus = new StudentGradeBUS();
            if (bus.DeleteStudentGrade(enrollmentID)) {
                JOptionPane.showMessageDialog(this, "Xoá thành công");
            } else {
                JOptionPane.showMessageDialog(this, "Xoá không thành công");
            }
            model.removeRow(selectedRow);
            loadDataIntoGradeTable();
        }
    }
    
    public class InfoStudentGrade extends JFrame {
    private Font sgUI15b;

    private JLabel lbEnrollmentID, lbCourseID, lbCourseName, lbStudentID, lbStudentName ,lbGrade;
    private JTextField jtfEnrollmentID, jtfCourseID, jtfCourseName, jtfStudentID, jtfStudentName ,jtfGrade;

    public InfoStudentGrade(int enrollmentID, int courseID, String courseName, int studentID,String studentName ,float grade) {
        sgUI15b = new Font("Segoe UI", Font.BOLD, 15);
        initComponents(); // Khởi tạo giao diện

        jtfEnrollmentID.setText(String.valueOf(enrollmentID));
        jtfCourseID.setText(String.valueOf(courseID));
        jtfCourseName.setText(courseName);
        jtfStudentID.setText(String.valueOf(studentID));
        jtfStudentName.setText(String.valueOf(studentName));
        jtfGrade.setText(String.valueOf(grade));
        
    }

    // Hàm khởi tạo giao diện
    private void initComponents() {
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setResizable(false);

        JPanel pnContent = new JPanel(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        pnContent.setBackground(Color.white);
        sgUI15b = new Font("Segoe UI", Font.BOLD, 15);

        lbEnrollmentID = new JLabel("Enrollment ID:");
        lbEnrollmentID.setFont(sgUI15b);
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.insets = new Insets(10, 10, 10, 10);
        pnContent.add(lbEnrollmentID, gbc);

        jtfEnrollmentID = new JTextField(20);
        jtfEnrollmentID.setFont(sgUI15b);
        jtfEnrollmentID.setEditable(false); 
        jtfEnrollmentID.setText(getName()); 


        lbCourseID = new JLabel("Course ID:");
        lbCourseID.setFont(sgUI15b);
        gbc.gridx = 0;
        gbc.gridy = 1;
        pnContent.add(lbCourseID, gbc);

        jtfCourseID = new JTextField(20);
        jtfCourseID.setFont(sgUI15b);
        jtfCourseID.setEditable(false);
        gbc.gridx = 1;
        gbc.gridy = 1;
        pnContent.add(jtfCourseID, gbc);

        lbCourseName = new JLabel("Course Name:");
        lbCourseName.setFont(sgUI15b);
        gbc.gridx = 0;
        gbc.gridy = 2;
        pnContent.add(lbCourseName, gbc);

        jtfCourseName = new JTextField(20);
        jtfCourseName.setFont(sgUI15b);
        jtfCourseName.setEditable(false);
        gbc.gridx = 1;
        gbc.gridy = 2;
        pnContent.add(jtfCourseName, gbc);

        lbStudentID = new JLabel("Student ID:");
        lbStudentID.setFont(sgUI15b);
        gbc.gridx = 0;
        gbc.gridy = 3;
        pnContent.add(lbStudentID, gbc);

        jtfStudentID = new JTextField(20);
        jtfStudentID.setFont(sgUI15b);
        jtfStudentID.setEditable(false);
        gbc.gridx = 1;
        gbc.gridy = 3;
        pnContent.add(jtfStudentID, gbc);
        
        lbStudentName = new JLabel("Student Name:");
        lbStudentName.setFont(sgUI15b);
        gbc.gridx = 0;
        gbc.gridy = 4; 
        pnContent.add(lbStudentName, gbc);

        jtfStudentName = new JTextField(20);
        jtfStudentName.setFont(sgUI15b);
        jtfStudentName.setEditable(false);
        gbc.gridx = 1;
        gbc.gridy = 4;
        pnContent.add(jtfStudentName, gbc);
        
        lbGrade = new JLabel("Grade:");
        lbGrade.setFont(sgUI15b);
        gbc.gridx = 0;
        gbc.gridy = 5;
        pnContent.add(lbGrade, gbc);

        jtfGrade = new JTextField(20);
        jtfGrade.setFont(sgUI15b);
        jtfGrade.setEditable(false);
        gbc.gridx = 1;
        gbc.gridy = 5;
        pnContent.add(jtfGrade, gbc);

        jtfEnrollmentID = new JTextField(20);
        jtfEnrollmentID.setFont(sgUI15b);
        jtfEnrollmentID.setEditable(false); // Không cho phép chỉnh sửa
        jtfEnrollmentID.addMouseListener(null); // Ngăn chặn sự kiện bấm chuột
        gbc.gridx = 1;
        gbc.gridy = 0;
        pnContent.add(jtfEnrollmentID, gbc);
        
        JButton jbCANCEL = new JButton("Thoát");
        jbCANCEL.setFont(sgUI15b);
        jbCANCEL.setBackground(Color.decode("#FF3D00"));
        jbCANCEL.setForeground(Color.white);
        jbCANCEL.addActionListener((e) -> {
            // Xử lý sự kiện thoát
            dispose();
        });
        gbc.gridx = 1;
        gbc.gridy = 7;
        pnContent.add(jbCANCEL, gbc);

        setContentPane(pnContent);
        pack();
        setVisible(true);
    }
}
    
    public class Item {
       
        private void showCbbCourseTitle(){
        try {
            ArrayList<CourseDTO> arr_courses = new ArrayList<>();
            courseMap = new HashMap<>();
            DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
            
            arr_courses = courseBUS.getList();
            
            model.addElement("All");
            courseMap.put("All", -1);
            
            for(CourseDTO course : arr_courses){
                String title = course.getTitle();
                int id = course.getCourseID();
                
                model.addElement(title);
                courseMap.put(title, id);
            }
            
            for (int i = 0; i < model.getSize(); i++) {
                cbbCourse.addItem(model.getElementAt(i));
            }

            
        } catch (Exception e) {
            e.getStackTrace();
        }
        }
        
    }
    
    
    
    


    private String string;

    /**
     * Get the value of string
     *
     * @return the value of string
     */
    public String getString() {
        return string;
    }

    /**
     * Set the value of string
     *
     * @param string new value of string
     */
    public void setString(String string) {
        this.string = string;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
        // (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default
         * look and feel.
         * For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(new FlatMacLightLaf());
                    break;
                }
            }
        } catch (UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddInstructorForm.class.getName()).log(java.util.logging.Level.SEVERE,
                    null, ex);
        }
        // </editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }

    public void runMain() {
        setTitle("testing");
        setSize(1000, 700);
        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setVisible(true);
        addPlaceHolderStyle(jtf_search);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtn;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDel1;
    private javax.swing.JButton btnModify;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btn_addCourse;
    private javax.swing.JComboBox<String> cbbCourse;
    private javax.swing.JButton delBtn;
    public javax.swing.JTable gradeTB;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jtf_search;
    private javax.swing.JTextField jtf_searchCourse;
    private javax.swing.JTextField jtf_searchGrade;
    private javax.swing.JTable mainTbl;
    private javax.swing.JButton reloadBtn;
    private javax.swing.JButton reloadBtn1;
    private javax.swing.JButton reload_course;
    private javax.swing.JTable tb_course;
    // End of variables declaration//GEN-END:variables
}
